import { blue } from '@ant-design/colors';
import { DeleteOutlined, EditOutlined, PauseCircleOutlined, PlayCircleOutlined } from '@ant-design/icons';
import { css } from '@emotion/react';
import styled from '@emotion/styled';
import { Table } from 'antd';
import { CompareFn } from 'antd/lib/table/interface';
import React, { Key, useCallback } from 'react';
import { useHistory } from 'react-router-dom';
import { AlignType, DataIndex } from 'rc-table/lib/interface';
import useRemoteStatus from '../../../hooks/useRemoteStatus';
import { compareTableItem } from '../../../lib/util/compareTableItem';
import StatusItem from '../../atoms/StatusItem';
import RemoteHeader from './RemoteHeader';

export type BuildStatus = 'success' | 'failure' | 'notbuild';

export interface LocalTableStatus {
  no: number;
  siteName: string;
  status: BuildStatus;
}
export type LocalStatusTableProps = {
  children?: React.ReactNode;
};

type LocalColumnName = 'no' | 'siteName' | 'status' | 'edit' | 'delete';

type LocalColumnPropsType = {
  [name in LocalColumnName]: {
    key?: Key;
    title?: React.ReactNode;
    dataIndex?: DataIndex;
    align?: AlignType;
    sorter?:
      | boolean
      | CompareFn<LocalColumnName>
      | {
          compare?: CompareFn<LocalColumnName>;
          /** Config multiple sorter order priority */
          multiple?: number;
        };
  };
};

const LocalColumnTitle = styled.div`
  font-weight: 700;
`;

const localColumnProps: LocalColumnName = {
  no: {
    key: 'no',
    title: <LocalColumnTitle>No</LocalColumnTitle>,
    dataIndex: 'no',
    align: 'center',
    sorter: {
      compare: (a, b) => compareTableItem(a, b, 'no'),
    },
  },
  siteName: {
    key: 'siteName',
    title: <LocalColumnTitle>Site Name</LocalColumnTitle>,
    dataIndex: 'siteName',
    align: 'center',
    sorter: {
      compare: (a, b) => compareTableItem(a, b, 'siteName'),
    },
  },
  status: {
    key: 'status',
    title: <LocalColumnTitle>Status</LocalColumnTitle>,
    dataIndex: 'status',
    align: 'center',
    sorter: {
      compare: (a, b) => compareTableItem(a, b, 'status'),
    },
  },

  delete: {
    key: 'no',
    title: <LocalColumnTitle>Delete</LocalColumnTitle>,
    align: 'center',
  },
};

export default function LocalStatusTable({ children }: LocalStatusTableProps): JSX.Element {
  const { remoteList, setRemoteList } = useRemoteStatus();
  const history = useHistory();

  const buildStatusRender = useCallback((value: BuildStatus, record: LocalTableStatus, index: number) => {
    switch (value) {
      case 'success':
        return (
          <StatusItem
            status={value}
            onClick={() => {
              history.push(`/status/local/${record.no}?name=${record.siteName}`);
            }}
          />
        );
      case 'failure':
        return (
          <StatusItem
            status={value}
            onClick={() => {
              history.push(`/status/local/${record.siteName}`);
            }}
          />
        );
      case 'notbuild':
        return (
          <StatusItem
            status={value}
            onClick={() => {
              history.push(`/status/remote/collect/${record.siteName}`);
            }}
          />
        );
      default:
        return null;
    }
  }, []);
  const startAndStopRender = useCallback((value: boolean) => {
    if (value) {
      return <PlayCircleOutlined css={iconStyle} />;
    } else {
      return <PauseCircleOutlined css={iconStyle} />;
    }
  }, []);

  const editRender = useCallback(() => {
    return <EditOutlined css={iconStyle} />;
  }, []);

  const deleteRender = useCallback(() => {
    return <DeleteOutlined css={iconStyle} />;
  }, []);

  const titleRender = useCallback(() => <RemoteHeader listCount={remoteList.length} />, [remoteList.length]);

  return (
    <Table<RemoteStatus>
      dataSource={remoteList}
      bordered
      title={titleRender}
      size="middle"
      pagination={{
        position: ['bottomCenter'],
        total: 500,
        defaultCurrent: 6,
      }}
    >
      <Table.Column<RemoteStatus> {...columnProps.no} />
      <Table.Column<RemoteStatus> {...columnProps.siteName} />
      <Table.Column<RemoteStatus> {...columnProps.collectStatus} render={buildStatusRender} />
      <Table.Column<RemoteStatus> {...columnProps.errorStatus} render={buildStatusRender} />
      <Table.Column<RemoteStatus> {...columnProps.crasStatus} render={buildStatusRender} />
      <Table.Column<RemoteStatus> {...columnProps.versionStatus} render={buildStatusRender} />
      <Table.Column<RemoteStatus> {...columnProps.isRunning} render={startAndStopRender} />
      <Table.Column<RemoteStatus> {...columnProps.edit} render={editRender} />
      <Table.Column<RemoteStatus> {...columnProps.delete} render={deleteRender} />
    </Table>
  );
}

const iconStyle = css`
  font-size: 1.25rem;
  &:hover {
    color: ${blue[4]};
  }
  &:active {
    color: ${blue[6]};
  }
`;
